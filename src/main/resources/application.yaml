spring:
  cache:
    type: redis # Define o tipo de cache como Redis (usa Spring Cache abstração com Redis por baixo)
    redis:
      time-to-live: ${TIME_TO_LIVE_REDIS:60s}
      cache-null-values: false
      use-key-prefix: true
      key-prefix: ${KEY_PREFIX_REDIS:meu-cached-shared::}
      enable-statistics: true
  data:
    redis:
      host: ${HOST_REDIS:localhost}
      port: ${PORT_REDIS:6379}
      username: ${USERNAME_REDIS:appuser}
      password: ${PASSWORD_REDIS:senhaF0rte123}
      ssl:
        enabled: ${SSL_ENABLED_REDIS:false} # Ativa conexão segura via SSL/TLS com o Redis
      client-type: lettuce # Cliente usado para conexão (Lettuce é padrão e assíncrono)
      timeout: ${TIMEOUT_REDIS:200ms}  # conexão socket timeout, para comandos Redis (leitura/gravação)
      connect-timeout: ${CONNECT_TIMEOUT_REDIS:2s}  # explicita conexão ativa :contentReference[oaicite:3]{index=3}
      client-name: ${CLIENT_NAME_REDIS:factorial-api-client}

      # https://redis.github.io/lettuce/user-guide/connecting-redis/
      lettuce:
        pool:
          enabled: true # Ativa o uso de pool de conexões (recomendado em produção)
          max-active: ${MAX_ACTIVE_LETTUCE_REDIS:50} # Conexões máximas
          max-idle: ${MAX_IDLE_LETTUCE_REDIS:20} # Máximo de conexões ociosas
          min-idle: ${MIN_IDLE_LETTUCE_REDIS:5} # Mínimo de conexões ociosas
          max-wait: ${MAX_WAIT_LETTUCE_REDIS:2000ms}     # Tempo de espera antes de falhar ao buscar conexão do pool
          time-between-eviction-runs: ${TIME_BETWEEN_EVICTION_RUNS_LETTUCE_REDIS:60000ms}  # a cada 60s remove idle
        shutdown-timeout: ${SHUTDOWN_TIMEOUT_LETTUCE_REDIS:1000ms}  # Tempo para desligar conexões graciosamente
        #fixed-timeout: ${FIXED_TIMEOUT_LETTUCE_REDIS:300ms}  #  Tempo fixo p/ timeout em cada operação
        #command-timeout: ${COMMAND_TIMEOUT_LETTUCE_REDIS:300ms} # Tempo máximo para execução de comandos

logging:
  level:
    org.springframework.data.redis: INFO

management:
  endpoints:
    web:
      exposure:
        include: "info, health, metrics"
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true # correto: probes.enabled (não probles.enable)
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true
    redis:
      enabled: false



